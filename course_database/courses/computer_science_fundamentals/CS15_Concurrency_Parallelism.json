{
  "id": "CS15",
  "name": "Concurrency & Parallelism",
  "category": "Computer Science Fundamentals",
  "primary_tech": "Concurrency",
  "topics": [
    "Threads & Processes",
    "Synchronization Primitives (Locks, Semaphores)",
    "Deadlocks & Livelocks",
    "Parallel Programming Paradigms"
  ],
  "levels": [
    "Intermediate",
    "Advanced"
  ],
  "recommended": true,
  "tags": [
    "performance",
    "systems",
    "multithreading"
  ],
  "alternatives": [],
  "resources": {
    "docs": [
      "https://nodejs.org/api/test.html",
      "https://nodejs.org/api/stream.html",
      "https://nodejs.org/api/os.html"
    ],
    "notes": [
      "https://www.geeksforgeeks.org/go-language/go-concurrency-and-parallelism/",
      "https://www.geeksforgeeks.org/operating-systems/difference-between-concurrency-and-parallelism/",
      "https://www.geeksforgeeks.org/python-program-with-concurrency/",
      "https://www.geeksforgeeks.org/java/java-util-concurrent-package/",
      "https://www.geeksforgeeks.org/cpp/cpp-concurrency/"
    ],
    "videos": [
      "https://www.youtube.com/watch?v=RlM9AfWf1WU",
      "https://www.youtube.com/watch?v=olYdb0DdGtM",
      "https://www.youtube.com/watch?v=r_MbozD32eo",
      "https://www.youtube.com/watch?v=VL5dILBZ46o",
      "https://www.youtube.com/watch?v=B9uR2gLM80E"
    ]
  },
  "quiz": [
    {
      "question": "What is the primary difference between a thread and a process?",
      "options": [
        "A thread is a lightweight process, with shared memory space with other threads in the process.",
        "A thread is heavier than a process, with its own dedicated memory space.",
        "A process is a lightweight thread, sharing its memory space with other processes.",
        "A process and a thread are the same, with no differences."
      ],
      "correct_option": 0,
      "hint": "Consider how memory and resources are shared between threads and processes."
    },
    {
      "question": "Which synchronization primitive is used to allow multiple threads to read but only one to write?",
      "options": [
        "Mutex",
        "Reader-Writer Lock",
        "Semaphore",
        "Spinlock"
      ],
      "correct_option": 1,
      "hint": "This primitive is specifically designed for scenarios involving multiple readers and a single writer."
    },
    {
      "question": "What is a deadlock in the context of concurrent programming?",
      "options": [
        "A situation where threads are executing in parallel without any issues.",
        "A condition where two or more threads are unable to proceed because each is waiting for the other to release resources.",
        "A method of ensuring threads do not interfere with each other.",
        "A type of lock that can be used to prevent race conditions."
      ],
      "correct_option": 1,
      "hint": "Deadlocks involve waiting for resources that never become available."
    },
    {
      "question": "Which of the following is a characteristic of livelock?",
      "options": [
        "Threads are perpetually blocked and never make progress.",
        "Threads keep changing their state in response to each other without making progress.",
        "Threads execute independently without synchronization issues.",
        "Threads are deadlocked and cannot proceed."
      ],
      "correct_option": 1,
      "hint": "Unlike deadlock, threads in livelock are not blocked but still do not make meaningful progress."
    },
    {
      "question": "What is an example of a parallel programming paradigm?",
      "options": [
        "Single-threaded execution",
        "MapReduce",
        "Synchronous programming",
        "Non-blocking I/O"
      ],
      "correct_option": 1,
      "hint": "This paradigm is widely used in handling large scale data processing in parallel."
    }
  ]
}