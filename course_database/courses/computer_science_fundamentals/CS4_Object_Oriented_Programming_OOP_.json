{
  "id": "CS4",
  "name": "Object-Oriented Programming (OOP)",
  "category": "Computer Science Fundamentals",
  "primary_tech": "OOP",
  "topics": [
    "Classes & Objects",
    "Encapsulation, Inheritance, Polymorphism",
    "Abstraction & Interfaces",
    "Design Patterns (Singleton, Factory basics)"
  ],
  "levels": [
    "Beginner",
    "Intermediate"
  ],
  "recommended": true,
  "tags": [
    "programming-paradigm",
    "software-design",
    "architecture"
  ],
  "alternatives": [
    {
      "tech": "Functional Programming",
      "reason": "Alternative paradigm focusing on pure functions and immutability",
      "tags": [
        "programming-paradigm",
        "functional"
      ],
      "preferred_if": [
        "User interested in languages like Haskell, Lisp, or advanced JavaScript"
      ],
      "alternative_quiz": [
        {
          "question": "What is a key characteristic of functional programming that differs from object-oriented programming?",
          "options": [
            "Use of pure functions and immutability",
            "Relying on objects and classes",
            "Encapsulation of data",
            "Inheritance and polymorphism"
          ],
          "correct_option": 0,
          "hint": "Think about how functional programming handles data and state."
        },
        {
          "question": "Which of the following languages is most closely associated with functional programming?",
          "options": [
            "Java",
            "Python",
            "Haskell",
            "Ruby"
          ],
          "correct_option": 2,
          "hint": "This language is known for its strong emphasis on pure functions."
        },
        {
          "question": "In functional programming, what does immutability refer to?",
          "options": [
            "Changing the state of an object",
            "Using methods to modify data",
            "Ensuring data cannot be changed after it's created",
            "Creating classes to encapsulate data"
          ],
          "correct_option": 2,
          "hint": "Consider how data is treated once it's created."
        },
        {
          "question": "Which of the following is NOT a principle commonly found in functional programming?",
          "options": [
            "Pure functions",
            "State mutation",
            "Higher-order functions",
            "First-class functions"
          ],
          "correct_option": 1,
          "hint": "Think about what functional programming tries to avoid compared to object-oriented programming."
        },
        {
          "question": "What is a 'pure function' in functional programming?",
          "options": [
            "A function that relies on global variables",
            "A function that always produces the same output for the same input without side effects",
            "A function that modifies its input",
            "A function that depends on the state of other functions"
          ],
          "correct_option": 1,
          "hint": "Consider what ensures predictability and consistency in functional programming."
        }
      ],
      "resources": {
        "docs": [
          "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",
          "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
          "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures"
        ],
        "notes": [
          "https://www.freecodecamp.org/news/intro-to-functional-programming-basics/",
          "https://www.geeksforgeeks.org/blogs/functional-programming-paradigm/",
          "https://www.geeksforgeeks.org/javascript/functional-programming-in-javascript/",
          "https://forum.freecodecamp.org/t/global-state-functional-programming/426785",
          "https://www.freecodecamp.org/news/functional-programming-in-java-course/"
        ],
        "videos": [
          "https://m.youtube.com/watch?v=XXkYBncbz0c&pp=ygUMI2tzc2J0ZGhzbnZk",
          "https://www.youtube.com/watch?v=VRpHdSFWGPs",
          "https://www.youtube.com/watch?v=5QZYGU0C2OA",
          "https://www.youtube.com/watch?v=f5j1TaJlc0w",
          "https://www.youtube.com/watch?v=rPSL1alFIjI"
        ]
      }
    }
  ],
  "resources": {
    "docs": [
      "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Advanced_JavaScript_objects/Object-oriented_programming",
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
      "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Advanced_JavaScript_objects/Classes_in_JavaScript"
    ],
    "notes": [
      "https://www.w3schools.com/java/java_oop.asp",
      "https://www.geeksforgeeks.org/java/object-oriented-programming-oops-concept-in-java/",
      "https://www.w3schools.com/cpp/cpp_oop.asp",
      "https://www.w3schools.com/cs/cs_oop.php",
      "https://www.geeksforgeeks.org/introduction-of-object-oriented-programming/"
    ],
    "videos": [
      "https://www.youtube.com/watch?v=wN0x9eZLix4",
      "https://www.youtube.com/watch?v=pTB0EiLXUC8",
      "https://www.youtube.com/watch?v=JeznW_7DlB0",
      "https://www.youtube.com/watch?v=iLRZi0Gu8Go",
      "https://www.youtube.com/watch?v=-pEs-Bss8Wc"
    ]
  },
  "quiz": [
    {
      "question": "What is the primary purpose of encapsulation in Object-Oriented Programming?",
      "options": [
        "To allow direct access to the attributes of an object.",
        "To bundle the data and methods that operate on the data within one unit.",
        "To create multiple instances of a class.",
        "To inherit properties from one class to another."
      ],
      "correct_option": 1,
      "hint": "Encapsulation is about bundling data with the methods that can operate on the data."
    },
    {
      "question": "Which of the following best describes inheritance in OOP?",
      "options": [
        "A class deriving properties and behavior from another class.",
        "Creating a unique method for a class.",
        "Encapsulating data within a single class.",
        "Hiding the complexity of a system."
      ],
      "correct_option": 0,
      "hint": "Inheritance allows a new class to take on the properties of an existing class."
    },
    {
      "question": "What is the key characteristic of polymorphism in Object-Oriented Programming?",
      "options": [
        "Methods to be defined once and used for multiple purposes.",
        "Encapsulating data within a class.",
        "Creating a single instance of a class.",
        "Using interfaces to hide implementation details."
      ],
      "correct_option": 0,
      "hint": "Polymorphism allows methods to process objects differently based on their data type or class."
    },
    {
      "question": "Which design pattern restricts a class to have only one instance?",
      "options": [
        "Factory Pattern",
        "Singleton Pattern",
        "Observer Pattern",
        "Decorator Pattern"
      ],
      "correct_option": 1,
      "hint": "This pattern ensures a class has only one instance and provides a global point of access to it."
    },
    {
      "question": "What is an interface in OOP?",
      "options": [
        "A class with implemented methods.",
        "A way to inherit behaviors from multiple classes.",
        "A reference type with only abstract methods.",
        "A class with both abstract and concrete methods."
      ],
      "correct_option": 2,
      "hint": "An interface contains no implementation but defines a contract for classes to implement."
    }
  ]
}