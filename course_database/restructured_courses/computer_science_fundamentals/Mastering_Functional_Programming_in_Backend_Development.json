{
  "id": "CS13",
  "name": "Mastering Functional Programming in Backend Development",
  "category": "Computer Science Fundamentals",
  "primary_tech": "Functional Programming",
  "topics": [
    "Introduction to Functional Programming",
    "Core Concepts: Pure Functions and Immutability",
    "Lambda Calculus and Functional Languages",
    "Higher-Order Functions and Closures",
    "Managing State and Side Effects",
    "Functional Design Patterns",
    "Concurrency in Functional Programming",
    "Building Scalable Backend Systems with Functional Paradigms"
  ],
  "recommended": false,
  "tags": [
    "functional-programming",
    "backend",
    "lambda-calculus",
    "immutable-data",
    "higher-order-functions"
  ],
  "resources": {
    "docs": [
      {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",
        "description": "This MDN documentation explains the `Array.prototype.reduce()` method, which executes a reducer function on each element of the array, resulting in a single output value."
      },
      {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
        "description": "Comprehensive resource for learning and referencing JavaScript, including guides, tutorials, and API documentation."
      },
      {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures",
        "description": "An in-depth guide explaining JavaScript closures, their creation, and practical use cases."
      }
    ],
    "notes": [
      {
        "url": "https://www.freecodecamp.org/news/intro-to-functional-programming-basics/",
        "description": "An introductory guide to understanding the principles and benefits of functional programming."
      },
      {
        "url": "https://www.geeksforgeeks.org/blogs/functional-programming-paradigm/",
        "description": "An overview of the functional programming paradigm, highlighting its principles, benefits, and common use cases."
      },
      {
        "url": "https://www.geeksforgeeks.org/javascript/functional-programming-in-javascript/",
        "description": "An introduction to functional programming concepts in JavaScript, including key principles and examples."
      },
      {
        "url": "https://forum.freecodecamp.org/t/global-state-functional-programming/426785",
        "description": "A discussion on managing global state using functional programming principles in JavaScript."
      },
      {
        "url": "https://www.freecodecamp.org/news/functional-programming-in-java-course/",
        "description": "A comprehensive course on functional programming concepts and techniques using Java."
      }
    ],
    "videos": [
      "https://m.youtube.com/watch?v=XXkYBncbz0c&pp=ygUMI2tzc2J0ZGhzbnZk",
      "https://www.youtube.com/watch?v=VRpHdSFWGPs",
      "https://www.youtube.com/watch?v=5QZYGU0C2OA",
      "https://www.youtube.com/watch?v=f5j1TaJlc0w",
      "https://www.youtube.com/watch?v=rPSL1alFIjI"
    ]
  },
  "quiz": [
    {
      "question": "What is a key characteristic of functional programming that differs from object-oriented programming?",
      "options": [
        "Use of pure functions and immutability",
        "Relying on objects and classes",
        "Encapsulation of data",
        "Inheritance and polymorphism"
      ],
      "correct_option": 0,
      "hint": "Think about how functional programming handles data and state."
    },
    {
      "question": "Which of the following languages is most closely associated with functional programming?",
      "options": [
        "Java",
        "Python",
        "Haskell",
        "Ruby"
      ],
      "correct_option": 2,
      "hint": "This language is known for its strong emphasis on pure functions."
    },
    {
      "question": "In functional programming, what does immutability refer to?",
      "options": [
        "Changing the state of an object",
        "Using methods to modify data",
        "Ensuring data cannot be changed after it's created",
        "Creating classes to encapsulate data"
      ],
      "correct_option": 2,
      "hint": "Consider how data is treated once it's created."
    },
    {
      "question": "Which of the following is NOT a principle commonly found in functional programming?",
      "options": [
        "Pure functions",
        "State mutation",
        "Higher-order functions",
        "First-class functions"
      ],
      "correct_option": 1,
      "hint": "Think about what functional programming tries to avoid compared to object-oriented programming."
    },
    {
      "question": "What is a 'pure function' in functional programming?",
      "options": [
        "A function that relies on global variables",
        "A function that always produces the same output for the same input without side effects",
        "A function that modifies its input",
        "A function that depends on the state of other functions"
      ],
      "correct_option": 1,
      "hint": "Consider what ensures predictability and consistency in functional programming."
    }
  ],
  "preferred_if": [
    "User interested in languages like Haskell, Lisp, or advanced JavaScript"
  ]
}