{
  "id": "FS18",
  "name": "GraphQL API Development (FullStack)",
  "category": "FullStack Development",
  "primary_tech": "GraphQL",
  "topics": [
    "Schema Design & Type System",
    "Queries, Mutations & Subscriptions (Frontend/Backend)",
    "Apollo Server & Client Integration",
    "Resolvers & Data Sources"
  ],
  "recommended": false,
  "tags": [
    "API",
    "data-fetching",
    "frontend-backend-communication"
  ],
  "resources": {
    "beginner": {
      "docs": [
        "https://graphql.org/learn/",
        "https://experienceleague.adobe.com/en/docs/experience-manager-cloud-service/content/headless/introduction",
        "https://graphql.org/community/resources/books/"
      ],
      "notes": [
        "https://graphql.org/learn/",
        "https://www.howtographql.com/basics/0-introduction/",
        "https://discuss.ocaml.org/t/tutorial-full-stack-web-dev-in-ocaml-w-dream-bonsai-and-graphql/9963",
        "https://hasura.io/learn/",
        "https://www.youtube.com/channel/UC7mca3O0DmdSG2Cr80sOD7g",
        "https://www.apollographql.com/tutorials/"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=BNYwj0ZvU1U&pp=0gcJCf0Ao7VqN5tD",
        "https://www.youtube.com/watch?v=yqWzCV0kU_c&pp=0gcJCdgAo7VqN5tD",
        "https://www.youtube.com/watch?v=Zg4XIpnLWQg",
        "https://www.youtube.com/watch?v=BcLNfwF04Kw",
        "https://www.youtube.com/watch?v=UYQSVH6B1k4",
        "https://www.youtube.com/watch?v=hZgFAO4_t4Q",
        "https://www.youtube.com/watch?v=kY--_5NhQoc",
        "https://www.youtube.com/watch?v=I6ypD7qv3Z8"
      ]
    },
    "intermediate": {
      "docs": [
        "https://graphql.org/learn/",
        "https://wundergraph.com/blog/10_graphql_tools_to_increase_developer_productivity",
        "https://www.ibm.com/think/topics/api",
        "https://wundergraph.com/blog/why_not_use_graphql",
        "https://experienceleague.adobe.com/en/docs/experience-manager-cloud-service/content/headless/graphql-api/content-fragments"
      ],
      "notes": [
        "https://discuss.ocaml.org/t/tutorial-full-stack-web-dev-in-ocaml-w-dream-bonsai-and-graphql/9963",
        "https://graphql.org/learn/",
        "https://wundergraph.com/blog/10_graphql_tools_to_increase_developer_productivity",
        "https://graphql.org/faq/getting-started/",
        "https://hasura.io/learn/"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=8sXRyHI3bLw",
        "https://www.youtube.com/watch?v=u-BbJyUpohM",
        "https://www.youtube.com/watch?v=tMTsNn09GNo",
        "https://www.youtube.com/watch?v=1n7EBOQu6wE",
        "https://www.youtube.com/watch?v=ufKuYohCt0w",
        "https://m.youtube.com/watch?v=7DVdVGm7Ht8&t=62168s",
        "https://www.youtube.com/watch?v=h7MTWLv3xvw&pp=0gcJCdgAo7VqN5tD",
        "https://www.youtube.com/watch?v=9G9_2a2k2Ls",
        "https://www.youtube.com/channel/UCTKSxERKbrpQOTa7QjDPjZg/videos"
      ]
    },
    "advanced": {
      "docs": [
        "https://graphql.org/learn/",
        "https://docs.gitlab.com/development/api_graphql_styleguide/",
        "https://shopify.dev/docs/api"
      ],
      "notes": [
        "https://graphql.org/learn/",
        "https://fullstackopen.com/en/",
        "https://docs.gitlab.com/development/api_graphql_styleguide/",
        "https://www.infoq.com/articles/ballerina-fullstack-rest-api/",
        "https://khalilstemmler.com/articles/graphql/learning-graphql-in-2020/",
        "https://welearncode.com/beginners-guide-graphql/"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=8sXRyHI3bLw",
        "https://www.youtube.com/watch?v=BNYwj0ZvU1U&pp=0gcJCf0Ao7VqN5tD",
        "https://www.youtube.com/watch?v=dP_QfmnghnQ&pp=0gcJCU8JAYcqIYzv",
        "https://www.youtube.com/watch?v=EEhgiHnnHXg",
        "https://www.youtube.com/watch?v=x6TiqrULv90",
        "https://www.youtube.com/watch?v=RceLeh9D85o&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=m3YrZav5-CU",
        "https://www.youtube.com/watch?v=fdsToXyIZTA",
        "https://www.youtube.com/playlist?list=PLSDeUiTMfxW6VChKWb26Z_mPR4f6fAmMV",
        "https://www.youtube.com/@maheshkariya"
      ]
    }
  },
  "quiz": {
    "beginner": [
      {
        "question": "What is the primary purpose of the type system in GraphQL schema design?",
        "options": [
          "To enforce authentication and authorization",
          "To define types and relationships between them",
          "To execute mutations on the server",
          "To manage subscriptions for real-time updates"
        ],
        "correct_option": 1,
        "hint": "It's related to how data structures are defined and connected."
      },
      {
        "question": "In GraphQL, what is a mutation used for?",
        "options": [
          "To fetch data",
          "To modify server-side data",
          "To establish real-time data subscriptions",
          "To define the schema"
        ],
        "correct_option": 1,
        "hint": "It's the equivalent of performing 'create', 'update', or 'delete' operations."
      }
    ],
    "intermediate": [
      {
        "question": "Which GraphQL feature allows clients to receive real-time updates from the server?",
        "options": [
          "Queries",
          "Mutations",
          "Resolvers",
          "Subscriptions"
        ],
        "correct_option": 3,
        "hint": "It's not a way to fetch or modify data, but to listen for changes."
      }
    ],
    "advanced": [
      {
        "question": "What is the role of resolvers in a GraphQL API?",
        "options": [
          "To authenticate user requests",
          "To define the structure of the data",
          "To handle the execution of queries and mutations",
          "To integrate third-party APIs"
        ],
        "correct_option": 2,
        "hint": "They are functions that execute when a query or mutation is called."
      },
      {
        "question": "How does Apollo Client typically integrate with a frontend application?",
        "options": [
          "By using RESTful API calls",
          "Through direct database connections",
          "Via GraphQL queries and mutations",
          "Using WebSockets for all data transfers"
        ],
        "correct_option": 2,
        "hint": "It involves executing GraphQL operations to communicate with the server."
      }
    ]
  }
}