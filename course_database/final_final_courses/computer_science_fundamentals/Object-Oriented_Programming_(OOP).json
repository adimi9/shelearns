{
  "id": "CS10",
  "name": "Object-Oriented Programming (OOP)",
  "category": "Computer Science Fundamentals",
  "primary_tech": "OOP",
  "topics": [
    "Classes & Objects",
    "Encapsulation, Inheritance, Polymorphism",
    "Abstraction & Interfaces",
    "Design Patterns (Singleton, Factory basics)"
  ],
  "recommended": true,
  "tags": [
    "programming-paradigm",
    "software-design",
    "architecture"
  ],
  "resources": {
    "beginner": {
      "docs": [
        {
          "url": "https://docs.python.org/3/tutorial/classes.html",
          "description": "An introductory guide to defining and using classes in Python programming.",
          "title": "9. Classes — Python 3.13.5 documentation"
        },
        {
          "url": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Advanced_JavaScript_objects/Object-oriented_programming",
          "description": "An introduction to object-oriented programming concepts in JavaScript for web development.",
          "title": "Object-oriented programming - Learn web development | MDN"
        },
        {
          "url": "https://www.php.net/manual/en/language.oop5.php",
          "description": "An official guide to object-oriented programming in PHP.",
          "title": "PHP: Classes and Objects - Manual"
        },
        {
          "url": "https://docs.nestjs.com/",
          "description": "Official documentation for building efficient, scalable Node.js server-side applications using NestJS.",
          "title": "Documentation | NestJS - A progressive Node.js framework"
        },
        {
          "url": "https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/oop",
          "description": "An introductory tutorial on object-oriented programming in C#.",
          "title": "Object-Oriented Programming - C# | Microsoft Learn"
        }
      ],
      "notes": [
        {
          "url": "https://www.youtube.com/watch?v=Vp0vVzJgJ5g&pp=0gcJCfwAo7VqN5tD",
          "description": "A YouTube video tutorial on understanding and using Spring Boot for Java development."
        },
        {
          "url": "https://devforum.roblox.com/t/roblox-oop-object-oriented-programming/1639499",
          "description": "An introductory guide to Object-Oriented Programming (OOP) in Roblox scripting.",
          "title": "Roblox OOP (Object Oriented Programming) - Resources / Community Tutorials - Developer Forum | Roblox"
        },
        {
          "url": "https://www.youtube.com/watch?v=j0lBrYSlYaU",
          "description": "An informative video tutorial on understanding and implementing OAuth 2.0 authentication."
        },
        {
          "url": "https://devforum.roblox.com/t/efficient-object-oriented-programming-tutorial/1061153",
          "description": "An in-depth tutorial on efficient object-oriented programming in Roblox.",
          "title": "Efficient Object Oriented Programming Tutorial - Resources / Community Tutorials - Developer Forum | Roblox"
        },
        {
          "url": "https://www.youtube.com/watch?v=JeznW_7DlB0",
          "description": "An introductory video tutorial on Docker and containerization basics."
        },
        {
          "url": "https://realpython.com/python3-object-oriented-programming/",
          "description": "An in-depth tutorial on object-oriented programming concepts in Python 3.",
          "title": "Object-Oriented Programming (OOP) in Python – Real Python"
        }
      ],
      "videos": [
        "https://www.youtube.com/watch?v=JeznW_7DlB0",
        "https://www.youtube.com/watch?v=Vp0vVzJgJ5g&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=j0lBrYSlYaU",
        "https://www.youtube.com/watch?v=wN0x9eZLix4",
        "https://www.youtube.com/watch?v=GEuS0tfLfEY&pp=ygUPI3ByYWtyYXRpa2Vyb29w",
        "https://www.youtube.com/watch?v=pTB0EiLXUC8",
        "https://www.youtube.com/watch?v=xG2Vbnv0wvg",
        "https://www.youtube.com/watch?v=GAvhe6oe-_4",
        "https://www.youtube.com/codebeauty",
        "https://www.youtube.com/playlist?list=PLmF-6jvwRvVNVPfGxGPMsf3cZafT83oH8"
      ]
    },
    "intermediate": {
      "docs": [
        {
          "url": "https://docs.python.org/3/tutorial/classes.html",
          "description": "An in-depth tutorial on defining and using classes in Python.",
          "title": "9. Classes — Python 3.13.5 documentation"
        },
        {
          "url": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Advanced_JavaScript_objects/Object-oriented_programming",
          "description": "An in-depth tutorial on object-oriented programming in JavaScript for web development.",
          "title": "Object-oriented programming - Learn web development | MDN"
        },
        {
          "url": "https://www.sciencedirect.com/science/article/abs/pii/S0164121222000310",
          "description": "An in-depth analysis of recent advancements in machine learning algorithms for data processing.",
          "title": "ScienceDirect"
        }
      ],
      "notes": [
        {
          "url": "https://devforum.roblox.com/t/efficient-object-oriented-programming-tutorial/1061153",
          "description": "A tutorial on efficient object-oriented programming in Roblox development.",
          "title": "Efficient Object Oriented Programming Tutorial - Resources / Community Tutorials - Developer Forum | Roblox"
        },
        {
          "url": "https://docs.python.org/3/tutorial/classes.html",
          "description": "An introductory guide to understanding and using classes in Python.",
          "title": "9. Classes — Python 3.13.5 documentation"
        },
        {
          "url": "https://devforum.roblox.com/t/easiest-way-to-do-oop-object-oriented-programming/1973501",
          "description": "A guide to implementing object-oriented programming in Roblox scripting.",
          "title": "Easiest way to do OOP (Object Oriented Programming) - Resources / Community Tutorials - Developer Forum | Roblox"
        },
        {
          "url": "https://www.thecodedmessage.com/posts/oop-3-inheritance/",
          "description": "An insightful exploration of inheritance in object-oriented programming.",
          "title": "Rust Is Beyond Object-Oriented, Part 3: Inheritance :: The Coded Message"
        },
        {
          "url": "https://www.datacamp.com/tutorial/functional-programming-vs-object-oriented-programming",
          "description": "An insightful comparison of functional and object-oriented programming paradigms.",
          "title": "Just a moment..."
        }
      ],
      "videos": [
        "https://www.youtube.com/watch?v=EazrhHMySQw&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=uUlLAfN3rJc",
        "https://www.youtube.com/watch?v=Af3s3KsxStY&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=c7u3ZdQowgU",
        "https://www.youtube.com/watch?v=PMFd95RgIwE&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=boEUcROx1N8",
        "https://www.youtube.com/watch?v=cM_ocyOrs_k",
        "https://www.youtube.com/watch?v=Jvss8fb1LdA",
        "https://www.youtube.com/watch?v=DSld0bOmlk8"
      ]
    },
    "advanced": {
      "docs": [
        {
          "url": "https://www.typescriptlang.org/docs/",
          "description": "Official documentation for learning and using TypeScript programming language.",
          "title": "TypeScript: The starting point for learning TypeScript"
        },
        {
          "url": "https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/oop",
          "description": "An introductory tutorial on object-oriented programming in C#.",
          "title": "Object-Oriented Programming - C# | Microsoft Learn"
        },
        {
          "url": "https://adv-r.hadley.nz/oo.html",
          "description": "An in-depth exploration of object-oriented programming in R.",
          "title": "Introduction | Advanced R"
        },
        {
          "url": "https://realpython.com/python3-object-oriented-programming/",
          "description": "An in-depth tutorial on object-oriented programming principles in Python 3.",
          "title": "Object-Oriented Programming (OOP) in Python – Real Python"
        }
      ],
      "notes": [
        {
          "url": "https://devforum.roblox.com/t/efficient-object-oriented-programming-tutorial/1061153",
          "description": "A tutorial on efficient object-oriented programming techniques in Roblox development.",
          "title": "Efficient Object Oriented Programming Tutorial - Resources / Community Tutorials - Developer Forum | Roblox"
        },
        {
          "url": "https://www.linkedin.com/posts/badhan_oop-programming-coding-activity-7212870207004905472-9UIL",
          "description": "An informative post discussing object-oriented programming concepts and coding practices.",
          "title": "I have organized my personal notes and insights on Object-Oriented Programming (OOP) into a comprehensive blog post. | Badhan Sen"
        },
        {
          "url": "https://realpython.com/python3-object-oriented-programming/",
          "description": "An in-depth tutorial on object-oriented programming in Python 3.",
          "title": "Object-Oriented Programming (OOP) in Python – Real Python"
        },
        {
          "url": "https://adv-r.hadley.nz/oo.html",
          "description": "An in-depth exploration of object-oriented programming in R.",
          "title": "Introduction | Advanced R"
        },
        {
          "url": "https://www.linkedin.com/posts/codebeauty_practical-oop-constructors-in-programming-activity-7234572040467283969-AwLE",
          "description": "An informative post on practical uses of constructors in object-oriented programming.",
          "title": "New to coding? | Saldina Nurak"
        },
        {
          "url": "https://www.datacamp.com/blog/how-to-learn-python-expert-guide",
          "description": "An expert guide offering strategies and resources for effectively learning Python.",
          "title": "Just a moment..."
        }
      ],
      "videos": [
        "https://www.youtube.com/watch?v=_vr5faCXFo8&pp=ygUJI29vcHBhcnRz",
        "https://www.youtube.com/watch?v=wN0x9eZLix4",
        "https://www.youtube.com/watch?v=kiUGf_Z08RQ&pp=0gcJCf0Ao7VqN5tD",
        "https://www.youtube.com/watch?v=EazrhHMySQw&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=eIrMbAQSU34",
        "https://www.youtube.com/watch?v=JeznW_7DlB0",
        "https://www.youtube.com/watch?v=-ghD-XjjO2g",
        "https://www.youtube.com/@DeepKnowledgeSpace/community",
        "https://www.youtube.com/channel/UCHuchVhVR-0xs7WUHKuHqlA",
        "https://www.youtube.com/c/programmingpalli"
      ]
    }
  },
  "quiz": {
    "beginner": [
      {
        "question": "What is a class in Object-Oriented Programming?",
        "options": [
          "A blueprint for creating objects",
          "An instance of an object",
          "A type of function",
          "A variable"
        ],
        "correct_option": 0,
        "hint": "Think of it as a template for objects."
      },
      {
        "question": "Which of the following best describes encapsulation in OOP?",
        "options": [
          "Hiding the internal state of an object and requiring all interaction to be performed through an object's methods",
          "Allowing objects to inherit traits from a parent class",
          "Creating new classes based on existing ones",
          "Hiding the complexity of a task"
        ],
        "correct_option": 0,
        "hint": "It's about restricting direct access to some components of an object."
      },
      {
        "question": "What is inheritance in OOP?",
        "options": [
          "A way to include multiple classes in one",
          "A method to override functions",
          "A mechanism to create a new class using the properties and methods of an existing class",
          "A pattern to ensure a class has only one instance"
        ],
        "correct_option": 2,
        "hint": "It's about reusing code through parent-child relationships."
      },
      {
        "question": "Which principle allows objects to be treated as instances of their parent class?",
        "options": [
          "Abstraction",
          "Polymorphism",
          "Encapsulation",
          "Inheritance"
        ],
        "correct_option": 1,
        "hint": "It's about handling different data types through a uniform interface."
      },
      {
        "question": "What is the purpose of a Singleton design pattern?",
        "options": [
          "To create multiple instances of a class",
          "To provide a way to create objects without specifying the exact class",
          "To ensure a class has only one instance and provide a global point of access to it",
          "To define a family of algorithms"
        ],
        "correct_option": 2,
        "hint": "It's about controlling object creation so there is only one instance."
      }
    ],
    "intermediate": [
      {
        "question": "What is the main purpose of encapsulation in object-oriented programming?",
        "options": [
          "To allow objects to inherit from one another",
          "To restrict access to certain components of an object",
          "To define a contract that classes must follow",
          "To enable multiple forms of a method"
        ],
        "correct_option": 1,
        "hint": "Encapsulation is about restricting access to certain parts of an object to protect its state."
      },
      {
        "question": "Which of the following is true about inheritance in OOP?",
        "options": [
          "A subclass can inherit from multiple superclasses in all OOP languages",
          "Inheritance allows a class to use methods and fields of another class",
          "Inheritance is used to hide the internal state of an object",
          "Inheritance is the same as polymorphism"
        ],
        "correct_option": 1,
        "hint": "Inheritance involves using methods and properties of a parent class."
      },
      {
        "question": "How does polymorphism benefit object-oriented programming?",
        "options": [
          "It provides a way to implement data hiding",
          "It allows objects to be treated as instances of their parent class",
          "It restricts access to certain components of a class",
          "It ensures a class has only one instance"
        ],
        "correct_option": 1,
        "hint": "Polymorphism enables objects to be used interchangeably when they share a common interface."
      },
      {
        "question": "Which design pattern is primarily used to ensure a class has only one instance?",
        "options": [
          "Factory",
          "Singleton",
          "Observer",
          "Strategy"
        ],
        "correct_option": 1,
        "hint": "This design pattern restricts a class to a single instance and provides a global point of access to it."
      },
      {
        "question": "What is the role of interfaces in object-oriented programming?",
        "options": [
          "To provide multiple inheritance capabilities",
          "To define methods that must be implemented by inheriting classes",
          "To prevent classes from being instantiated",
          "To automatically handle error checking in classes"
        ],
        "correct_option": 1,
        "hint": "Interfaces define a set of methods that must be implemented, providing a form of abstraction."
      }
    ],
    "advanced": [
      {
        "question": "Which of the following best describes the concept of encapsulation in object-oriented programming?",
        "options": [
          "Encapsulation is the mechanism of restricting direct access to some of an object's components.",
          "Encapsulation allows a new class to inherit properties and behaviors from an existing class.",
          "Encapsulation refers to the ability to define multiple methods with the same name but different implementations.",
          "Encapsulation is the process of converting an object into a format that can be easily stored and retrieved."
        ],
        "correct_option": 0,
        "hint": "Encapsulation deals with hiding the internal state of an object."
      },
      {
        "question": "In a situation where a superclass and a subclass both have a method with the same signature, which concept does this demonstrate in object-oriented programming?",
        "options": [
          "Abstraction",
          "Inheritance",
          "Overloading",
          "Overriding"
        ],
        "correct_option": 3,
        "hint": "This concept involves redefining a superclass method in a subclass."
      },
      {
        "question": "Which design pattern restricts the instantiation of a class to one single instance and provides a global point of access to it?",
        "options": [
          "Factory",
          "Builder",
          "Singleton",
          "Prototype"
        ],
        "correct_option": 2,
        "hint": "This pattern ensures only one instance of a class is created."
      },
      {
        "question": "When a class is declared as abstract, what does it imply?",
        "options": [
          "The class cannot have any methods.",
          "The class can be instantiated directly.",
          "The class must have at least one abstract method.",
          "The class cannot be subclassed."
        ],
        "correct_option": 2,
        "hint": "Abstract classes are meant to be extended, not directly instantiated."
      },
      {
        "question": "How does polymorphism benefit in the context of interface implementation in OOP?",
        "options": [
          "It allows objects to change form during execution.",
          "It restricts access to certain parts of an object.",
          "It enables multiple implementations of the same method interface.",
          "It allows a class to inherit more than one class."
        ],
        "correct_option": 2,
        "hint": "Polymorphism allows methods to be defined in multiple forms."
      }
    ]
  }
}