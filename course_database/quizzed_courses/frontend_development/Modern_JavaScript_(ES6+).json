{
  "id": "FE9",
  "name": "Modern JavaScript (ES6+)",
  "category": "Frontend Development",
  "primary_tech": "JavaScript",
  "topics": [
    "Variables, Scoping, Functions",
    "ES6 Features",
    "Async JS, Promises, Fetch API"
  ],
  "recommended": true,
  "tags": [
    "programming",
    "fundamentals",
    "language"
  ],
  "resources": {
    "beginner": {
      "docs": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
        "https://javascript.info/",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
        "https://docraptor.com/documentation/article/3778430-using-modern-javascript-es6-ecmascript-2015-with-docraptor",
        "https://www.w3schools.com/js/js_es6.asp"
      ],
      "notes": [
        "https://www.youtube.com/watch?v=NCwa_xi0Uuc",
        "https://m.youtube.com/watch?v=WZQc7RUAg18&t=0s",
        "https://www.youtube.com/watch?v=Ks0Z_qP2WEk",
        "https://m.youtube.com/watch?v=1lFXj5h8IMA&t=4s",
        "https://www.youtube.com/watch?v=IEf1KAcK6A8"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=NCwa_xi0Uuc",
        "https://www.youtube.com/watch?v=Ks0Z_qP2WEk",
        "https://www.youtube.com/watch?v=nZ1DMMsyVyI",
        "https://www.youtube.com/watch?v=hdI2bqOjy3c",
        "https://m.youtube.com/watch?v=1lFXj5h8IMA&t=4s",
        "https://m.youtube.com/watch?v=WZQc7RUAg18&t=0s",
        "https://www.youtube.com/watch?v=IEf1KAcK6A8",
        "https://www.youtube.com/channel/UCEsOe19aGFcM31zLG2M2sXw"
      ]
    },
    "intermediate": {
      "docs": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
        "https://www.typescriptlang.org/tsconfig/",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch",
        "https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html"
      ],
      "notes": [
        "https://www.youtube.com/channel/UCEsOe19aGFcM31zLG2M2sXw",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
        "https://blog.miguelgrinberg.com/post/the-react-mega-tutorial-chapter-1-modern-javascript",
        "https://discuss.prosemirror.net/t/how-to-install-prosemirror/1797",
        "https://marcobotto.com/blog/the-hitchhikers-guide-to-the-modern-front-end-development-workflow/"
      ],
      "videos": [
        "https://www.youtube.com/channel/UCEsOe19aGFcM31zLG2M2sXw",
        "https://www.youtube.com/watch?v=O4DaRScJFNs",
        "https://www.youtube.com/watch?v=j59qQ7YWLxw&pp=0gcJCdgAo7VqN5tD",
        "https://www.youtube.com/playlist?list=PLHdCowjFIBmKWMk4f_gH6mtui-ur8K2XC",
        "https://www.youtube.com/watch?v=K_fFFRM7PEA",
        "https://www.youtube.com/@letcode",
        "https://www.youtube.com/c/Harshitvashisth",
        "https://www.youtube.com/watch?v=zuKbR4Q428o",
        "https://www.youtube.com/watch?v=HFoe0Wc-UbI",
        "https://www.youtube.com/watch?v=GPP_XBydGR8"
      ]
    },
    "advanced": {
      "docs": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
        "https://javascript.info/",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",
        "https://www.typescriptlang.org/docs/",
        "https://www.linkedin.com/posts/dmitrykostyuk_apps-script-with-vite-clasp-github-actions-activity-7244283003676364800-OZsA"
      ],
      "notes": [
        "https://javascript.info/",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",
        "https://marcobotto.com/blog/the-hitchhikers-guide-to-the-modern-front-end-development-workflow/",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
        "https://www.linkedin.com/posts/dmitrykostyuk_apps-script-with-vite-clasp-github-actions-activity-7244283003676364800-OZsA"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=NCwa_xi0Uuc",
        "https://www.youtube.com/watch?v=BI1o2H9z9fo",
        "https://www.youtube.com/watch?v=SqcY0GlETPk",
        "https://www.youtube.com/watch?v=ZVnjOPwW4ZA",
        "https://www.youtube.com/watch?v=uBDk_wgVh4E",
        "https://www.youtube.com/watch?v=hdI2bqOjy3c&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=kqtD5dpn9C8&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=lfmg-EJ8gm4"
      ]
    }
  },
  "quiz": {
    "beginner": [
      {
        "question": "Which keyword is used to declare a variable in JavaScript that can be reassigned?",
        "options": [
          "const",
          "let",
          "var",
          "assign"
        ],
        "correct_option": 1,
        "hint": "This keyword is block-scoped and allows reassignment."
      },
      {
        "question": "What does the 'const' keyword do in JavaScript?",
        "options": [
          "Declares a block-scoped variable that can be reassigned",
          "Declares a block-scoped variable that cannot be reassigned",
          "Declares a function",
          "Declares a global variable"
        ],
        "correct_option": 1,
        "hint": "This keyword is similar to 'let' but does not allow reassignment."
      },
      {
        "question": "Which of the following is a new feature introduced in ES6?",
        "options": [
          "Arrow functions",
          "Global variables",
          "Function overloading",
          "XMLHttpRequest"
        ],
        "correct_option": 0,
        "hint": "This feature provides a more concise syntax for writing functions."
      },
      {
        "question": "What method is used to make HTTP requests and returns a promise in modern JavaScript?",
        "options": [
          "XMLHttpRequest",
          "fetch",
          "getRequest",
          "makeRequest"
        ],
        "correct_option": 1,
        "hint": "This method is a modern alternative to XMLHttpRequest."
      },
      {
        "question": "What is the purpose of a promise in JavaScript?",
        "options": [
          "To create synchronous code",
          "To handle asynchronous operations",
          "To define a variable",
          "To declare a constant"
        ],
        "correct_option": 1,
        "hint": "This is used to handle operations that take some time to complete, such as network requests."
      }
    ],
    "intermediate": [
      {
        "question": "Which of the following is a correct way to declare a variable in JavaScript using ES6 syntax?",
        "options": [
          "var x = 10;",
          "let x = 10;",
          "const x;",
          "define x = 10;"
        ],
        "correct_option": 1,
        "hint": "In ES6, 'let' and 'const' are used for variable declarations."
      },
      {
        "question": "What is the main difference between 'let' and 'const' in JavaScript?",
        "options": [
          "'let' variables can be reassigned, 'const' variables cannot.",
          "'const' variables can be reassigned, 'let' variables cannot.",
          "Both 'let' and 'const' allow reassignment.",
          "'let' is function-scoped, 'const' is block-scoped."
        ],
        "correct_option": 0,
        "hint": "The key difference involves reassignment."
      },
      {
        "question": "What will be logged to the console in the following code snippet? \n\nfunction testScope() {\n  if (true) {\n    let x = 5;\n  }\n  console.log(x);\n}\ntestScope();",
        "options": [
          "5",
          "undefined",
          "ReferenceError",
          "null"
        ],
        "correct_option": 2,
        "hint": "Consider the scope of 'let' declarations."
      },
      {
        "question": "Which statement is true about Promises in JavaScript?",
        "options": [
          "Promises can only be in a 'fulfilled' state.",
          "A fulfilled Promise cannot be chained with .then().",
          "Promises can be in 'pending', 'fulfilled', or 'rejected' states.",
          "Promises are synchronous by nature."
        ],
        "correct_option": 2,
        "hint": "Promises have three possible states."
      },
      {
        "question": "What is the correct way to use the Fetch API to retrieve data from a URL?",
        "options": [
          "fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data));",
          "fetch('https://api.example.com/data', {\n  method: 'GET'\n}).done(data => console.log(data));",
          "let request = new XMLHttpRequest();\nrequest.open('GET', 'https://api.example.com/data');\nrequest.send();",
          "$.ajax('https://api.example.com/data').done(data => console.log(data));"
        ],
        "correct_option": 0,
        "hint": "The fetch API uses promises to handle asynchronous operations."
      }
    ],
    "advanced": [
      {
        "question": "Which of the following is NOT a correct way to declare a variable in JavaScript ES6?",
        "options": [
          "var myVar = 'Hello';",
          "let myVar = 'Hello';",
          "const myVar = 'Hello';",
          "define myVar = 'Hello';"
        ],
        "correct_option": 3,
        "hint": "ES6 introduced 'let' and 'const' for variable declaration, but the traditional 'var' is still valid."
      },
      {
        "question": "How does the 'let' keyword in JavaScript differ from 'var' in terms of scoping?",
        "options": [
          "'let' is function-scoped while 'var' is block-scoped",
          "'let' is block-scoped while 'var' is function-scoped",
          "Both 'let' and 'var' are globally scoped",
          "'let' is globally scoped while 'var' is block-scoped"
        ],
        "correct_option": 1,
        "hint": "Consider how block-level constructs like loops affect the visibility of variables."
      },
      {
        "question": "Which of the following syntax correctly implements an arrow function that returns the square of a number?",
        "options": [
          "const square = (x) => x * x;",
          "const square = x => { return x * x; };",
          "const square = function(x) { x * x; };",
          "const square = x => return x * x;"
        ],
        "correct_option": 0,
        "hint": "Arrow functions can have an implicit return if the function body is a single expression."
      },
      {
        "question": "What is the primary benefit of using promises in JavaScript for asynchronous operations?",
        "options": [
          "They simplify complex nested callbacks, making code easier to read and maintain.",
          "They are faster than traditional callbacks.",
          "They automatically handle all errors in asynchronous code.",
          "They allow synchronous execution of code."
        ],
        "correct_option": 0,
        "hint": "Think about how promises handle asynchronous control flow compared to callbacks."
      },
      {
        "question": "How can you handle errors in a Fetch API request using promises?",
        "options": [
          "By using the 'catch' method chained to the promise",
          "By wrapping fetch in a try-catch block",
          "By using a global error handler",
          "By setting an error flag within the fetch call"
        ],
        "correct_option": 0,
        "hint": "Consider how promises are used to manage asynchronous operations and their outcomes."
      }
    ]
  }
}