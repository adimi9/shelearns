{
  "id": "FE2",
  "name": "TypeScript for Frontend",
  "category": "Frontend Development",
  "primary_tech": "TypeScript",
  "topics": [
    "Type Annotations & Interfaces",
    "Generics",
    "TS in React/Vue"
  ],
  "recommended": true,
  "tags": [
    "typescript",
    "typed",
    "frontend"
  ],
  "resources": {
    "beginner": {
      "docs": [
        "https://www.typescriptlang.org/",
        "https://nextjs.org/docs",
        "https://www.typescriptlang.org/docs/",
        "https://jestjs.io/docs/getting-started"
      ],
      "notes": [
        "https://www.youtube.com/watch?v=k5E2AVpwsko&pp=0gcJCfwAo7VqN5tD",
        "https://www.typescriptlang.org/",
        "https://www.youtube.com/watch?v=ZVnjOPwW4ZA",
        "https://techblog.topdesk.com/coding/front-end-with-typescript-tutorial-step-1-to-3-minimal-typescript/",
        "https://www.youtube.com/watch?v=61v23Ce5SXA",
        "https://www.freecodecamp.org/news/angular-for-beginners-course/"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=k5E2AVpwsko&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=ZVnjOPwW4ZA",
        "https://www.youtube.com/watch?v=MsnQ5uepIaE&pp=0gcJCdgAo7VqN5tD",
        "https://www.youtube.com/watch?v=61v23Ce5SXA",
        "https://www.youtube.com/watch?v=xTVQZ46wc28",
        "https://www.youtube.com/watch?v=SqcY0GlETPk",
        "https://m.youtube.com/watch?v=I2NNxr3WPDo&t=0s",
        "https://www.youtube.com/DecodedFrontend",
        "https://www.youtube.com/channel/UC6vRUjYqDuoUsYsku86Lrsw",
        "https://www.youtube.com/c/ZachGollwitzer"
      ]
    },
    "intermediate": {
      "docs": [
        "https://nextjs.org/docs",
        "https://jestjs.io/docs/getting-started",
        "https://react.dev/learn/typescript",
        "https://docs.amplify.aws/"
      ],
      "notes": [
        "https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html",
        "https://stackoverflow.com/questions/51197940/file-name-differs-from-already-included-file-name-only-in-casing-on-relative-p",
        "https://react.dev/learn/typescript",
        "https://blog.miguelgrinberg.com/post/how-to-create-a-react--flask-project",
        "https://frontendmasters.com/blog/a-complete-guide-to-beginning-with-typescript/",
        "https://experienceleaguecommunities.adobe.com/t5/adobe-experience-manager/aem-wknd-tutorial-installation-error/m-p/556710/highlight/true"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=EcCTIExsqmI",
        "https://www.youtube.com/watch?v=JBSUgDxICg8",
        "https://www.youtube.com/watch?v=3qBXWUpoPHo",
        "https://www.youtube.com/watch?v=AS79oJ3Fcf0",
        "https://www.youtube.com/watch?v=8Xwq35cPwYg",
        "https://www.youtube.com/watch?v=8sXRyHI3bLw",
        "https://www.youtube.com/watch?v=vcNtrYfroDY",
        "https://www.youtube.com/watch?v=zuKbR4Q428o"
      ]
    },
    "advanced": {
      "docs": [
        "https://www.typescriptlang.org/docs/",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
        "https://www.typescriptlang.org/docs/handbook/intro.html",
        "https://nextjs.org/docs",
        "https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"
      ],
      "notes": [
        "https://www.youtube.com/watch?v=SqcY0GlETPk",
        "https://www.typescriptlang.org/docs/",
        "https://www.youtube.com/watch?v=ZVnjOPwW4ZA",
        "https://fullstackopen.com/en/",
        "https://www.youtube.com/watch?v=d56mG7DezGs",
        "https://marcobotto.com/blog/the-hitchhikers-guide-to-the-modern-front-end-development-workflow/"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=SqcY0GlETPk",
        "https://www.youtube.com/watch?v=ZVnjOPwW4ZA",
        "https://www.youtube.com/watch?v=d56mG7DezGs",
        "https://www.youtube.com/watch?v=Tef1e9FiSR0",
        "https://www.youtube.com/watch?v=vcNtrYfroDY",
        "https://www.youtube.com/watch?v=3qBXWUpoPHo",
        "https://www.youtube.com/watch?v=b8ZUb_Okxro&pp=ygUMI3Jlc3RhcGljb2Rl",
        "https://www.youtube.com/watch?v=Gc4Xh8u19NU"
      ]
    }
  },
  "quiz": {
    "beginner": [
      {
        "question": "What is the primary purpose of type annotations in TypeScript?",
        "options": [
          "To improve code readability",
          "To speed up code execution",
          "To allow dynamic typing",
          "To enable runtime type checking"
        ],
        "correct_option": 0,
        "hint": "Type annotations help in understanding what types of data are expected."
      },
      {
        "question": "Which TypeScript feature allows you to define the shape of an object?",
        "options": [
          "Modules",
          "Interfaces",
          "Enums",
          "Generics"
        ],
        "correct_option": 1,
        "hint": "This feature is similar to classes but is used for type checking only."
      },
      {
        "question": "In TypeScript, what are generics used for?",
        "options": [
          "To define multiple types at once",
          "To enforce strict null checks",
          "To create reusable components",
          "To compile TypeScript to JavaScript"
        ],
        "correct_option": 2,
        "hint": "Generics allow you to create components that can work with any data type."
      },
      {
        "question": "How does TypeScript enhance React development?",
        "options": [
          "By enabling server-side rendering",
          "By providing type safety for components",
          "By reducing bundle size",
          "By automating UI testing"
        ],
        "correct_option": 1,
        "hint": "TypeScript helps catch errors at compile time rather than runtime."
      },
      {
        "question": "How can TypeScript be used in a Vue.js project?",
        "options": [
          "By using a special TypeScript syntax",
          "By configuring Vue CLI to support TypeScript",
          "By writing all components as JavaScript classes",
          "By disabling reactivity system"
        ],
        "correct_option": 1,
        "hint": "Vue CLI provides an option to add TypeScript support during project setup."
      }
    ],
    "intermediate": [
      {
        "question": "What is the primary benefit of using TypeScript interfaces over type aliases for defining object shapes?",
        "options": [
          "Interfaces can be extended through declaration merging.",
          "Type aliases provide better performance at runtime.",
          "Interfaces allow for recursive types, while type aliases do not.",
          "Type aliases support multiple inheritance, unlike interfaces."
        ],
        "correct_option": 0,
        "hint": "Consider how TypeScript interfaces handle multiple declarations."
      },
      {
        "question": "How do generics improve the flexibility and reusability of functions in TypeScript?",
        "options": [
          "Generics enforce stricter type checking.",
          "Generics allow functions to accept any type without losing type safety.",
          "Generics limit functions to a single specific type.",
          "Generics improve runtime performance by eliminating type checks."
        ],
        "correct_option": 1,
        "hint": "Think about how generics provide a way to work with variable types while maintaining type safety."
      },
      {
        "question": "In a TypeScript React component, how would you define props of type string using interfaces?",
        "options": [
          "interface Props { text: number; }",
          "interface Props { text: string; }",
          "type Props = { text: number; }",
          "type Props = { text: boolean; }"
        ],
        "correct_option": 1,
        "hint": "Consider how interfaces are used to define the shape of props in React."
      },
      {
        "question": "Which of the following is a correct way to apply generics to a function in TypeScript?",
        "options": [
          "function identity<T>(arg: T): T { return arg; }",
          "function identity(arg: T): T { return arg; }",
          "function identity<T extends string>(arg: number): T { return arg; }",
          "function identity(arg: T): number { return arg; }"
        ],
        "correct_option": 0,
        "hint": "Remember that generics are specified by placing a type variable in angle brackets."
      },
      {
        "question": "In a Vue component using TypeScript, how can you ensure that a prop of type number is required?",
        "options": [
          "props: { count: { type: Number, required: true } }",
          "props: { count: { type: 'number', required: true } }",
          "props: { count: { type: Number, default: 0 } }",
          "props: { count: { type: 'Number', required: false } }"
        ],
        "correct_option": 0,
        "hint": "Think about how props are defined in Vue and how TypeScript types are specified for them."
      }
    ],
    "advanced": [
      {
        "question": "In TypeScript, how can you ensure type safety when using a function that accepts multiple argument types?",
        "options": [
          "Use function overloading",
          "Implement a type guard",
          "Define a union type",
          "All of the above"
        ],
        "correct_option": 3,
        "hint": "Consider how you can cater to multiple types while ensuring type safety."
      },
      {
        "question": "What is the main advantage of using generics in TypeScript?",
        "options": [
          "They allow for dynamic typing",
          "They enable strict null checks",
          "They provide a way to create reusable components",
          "They simplify the syntax for type annotations"
        ],
        "correct_option": 2,
        "hint": "Think about how generics can enhance the reusability and flexibility of your code."
      },
      {
        "question": "How do interfaces in TypeScript differ from type aliases when extending existing types?",
        "options": [
          "Interfaces cannot extend other interfaces",
          "Type aliases cannot extend interfaces",
          "Interfaces can be merged, while type aliases cannot",
          "Type aliases are more performant than interfaces"
        ],
        "correct_option": 2,
        "hint": "Consider how interfaces and type aliases handle extensions and merging."
      },
      {
        "question": "In a React component written in TypeScript, how would you define the type for component props?",
        "options": [
          "Use type aliases",
          "Use an interface",
          "Use class inheritance",
          "Use a generic type"
        ],
        "correct_option": 1,
        "hint": "React components often require structured typing for props."
      },
      {
        "question": "When integrating TypeScript with Vue, which feature allows you to ensure that all props are correctly typed?",
        "options": [
          "Vue's PropType utility",
          "TypeScript's enum feature",
          "Using decorators",
          "Vue's data function"
        ],
        "correct_option": 0,
        "hint": "Vue provides a utility specifically designed for prop typing in TypeScript."
      }
    ]
  }
}