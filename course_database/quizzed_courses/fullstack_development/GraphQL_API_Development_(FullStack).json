{
  "id": "FS18",
  "name": "GraphQL API Development (FullStack)",
  "category": "FullStack Development",
  "primary_tech": "GraphQL",
  "topics": [
    "Schema Design & Type System",
    "Queries, Mutations & Subscriptions (Frontend/Backend)",
    "Apollo Server & Client Integration",
    "Resolvers & Data Sources"
  ],
  "recommended": false,
  "tags": [
    "API",
    "data-fetching",
    "frontend-backend-communication"
  ],
  "resources": {
    "beginner": {
      "docs": [
        "https://graphql.org/learn/",
        "https://experienceleague.adobe.com/en/docs/experience-manager-cloud-service/content/headless/introduction",
        "https://graphql.org/community/resources/books/"
      ],
      "notes": [
        "https://graphql.org/learn/",
        "https://www.howtographql.com/basics/0-introduction/",
        "https://discuss.ocaml.org/t/tutorial-full-stack-web-dev-in-ocaml-w-dream-bonsai-and-graphql/9963",
        "https://hasura.io/learn/",
        "https://www.youtube.com/channel/UC7mca3O0DmdSG2Cr80sOD7g",
        "https://www.apollographql.com/tutorials/"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=BNYwj0ZvU1U&pp=0gcJCf0Ao7VqN5tD",
        "https://www.youtube.com/watch?v=yqWzCV0kU_c&pp=0gcJCdgAo7VqN5tD",
        "https://www.youtube.com/watch?v=Zg4XIpnLWQg",
        "https://www.youtube.com/watch?v=BcLNfwF04Kw",
        "https://www.youtube.com/watch?v=UYQSVH6B1k4",
        "https://www.youtube.com/watch?v=hZgFAO4_t4Q",
        "https://www.youtube.com/watch?v=kY--_5NhQoc",
        "https://www.youtube.com/watch?v=I6ypD7qv3Z8"
      ]
    },
    "intermediate": {
      "docs": [
        "https://graphql.org/learn/",
        "https://wundergraph.com/blog/10_graphql_tools_to_increase_developer_productivity",
        "https://www.ibm.com/think/topics/api",
        "https://wundergraph.com/blog/why_not_use_graphql",
        "https://experienceleague.adobe.com/en/docs/experience-manager-cloud-service/content/headless/graphql-api/content-fragments"
      ],
      "notes": [
        "https://discuss.ocaml.org/t/tutorial-full-stack-web-dev-in-ocaml-w-dream-bonsai-and-graphql/9963",
        "https://graphql.org/learn/",
        "https://wundergraph.com/blog/10_graphql_tools_to_increase_developer_productivity",
        "https://graphql.org/faq/getting-started/",
        "https://hasura.io/learn/"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=8sXRyHI3bLw",
        "https://www.youtube.com/watch?v=u-BbJyUpohM",
        "https://www.youtube.com/watch?v=tMTsNn09GNo",
        "https://www.youtube.com/watch?v=1n7EBOQu6wE",
        "https://www.youtube.com/watch?v=ufKuYohCt0w",
        "https://m.youtube.com/watch?v=7DVdVGm7Ht8&t=62168s",
        "https://www.youtube.com/watch?v=h7MTWLv3xvw&pp=0gcJCdgAo7VqN5tD",
        "https://www.youtube.com/watch?v=9G9_2a2k2Ls",
        "https://www.youtube.com/channel/UCTKSxERKbrpQOTa7QjDPjZg/videos"
      ]
    },
    "advanced": {
      "docs": [
        "https://graphql.org/learn/",
        "https://docs.gitlab.com/development/api_graphql_styleguide/",
        "https://shopify.dev/docs/api"
      ],
      "notes": [
        "https://graphql.org/learn/",
        "https://fullstackopen.com/en/",
        "https://docs.gitlab.com/development/api_graphql_styleguide/",
        "https://www.infoq.com/articles/ballerina-fullstack-rest-api/",
        "https://khalilstemmler.com/articles/graphql/learning-graphql-in-2020/",
        "https://welearncode.com/beginners-guide-graphql/"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=8sXRyHI3bLw",
        "https://www.youtube.com/watch?v=BNYwj0ZvU1U&pp=0gcJCf0Ao7VqN5tD",
        "https://www.youtube.com/watch?v=dP_QfmnghnQ&pp=0gcJCU8JAYcqIYzv",
        "https://www.youtube.com/watch?v=EEhgiHnnHXg",
        "https://www.youtube.com/watch?v=x6TiqrULv90",
        "https://www.youtube.com/watch?v=RceLeh9D85o&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=m3YrZav5-CU",
        "https://www.youtube.com/watch?v=fdsToXyIZTA",
        "https://www.youtube.com/playlist?list=PLSDeUiTMfxW6VChKWb26Z_mPR4f6fAmMV",
        "https://www.youtube.com/@maheshkariya"
      ]
    }
  },
  "quiz": {
    "beginner": [
      {
        "question": "What is a key benefit of using GraphQL over REST APIs?",
        "options": [
          "GraphQL allows for multiple endpoints for different data",
          "GraphQL enables clients to request only the data they need",
          "GraphQL does not support real-time data fetching",
          "GraphQL requires less setup than REST"
        ],
        "correct_option": 1,
        "hint": "Think about how GraphQL optimizes data fetching."
      },
      {
        "question": "In GraphQL, what is the purpose of a schema?",
        "options": [
          "To define the structure of the data and the types of queries",
          "To handle authentication and authorization",
          "To manage the server-side logic of API requests",
          "To perform caching of API responses"
        ],
        "correct_option": 0,
        "hint": "Consider what foundational element in GraphQL defines what data clients can query."
      },
      {
        "question": "Which of the following is a type of operation you can perform in GraphQL?",
        "options": [
          "GET",
          "POST",
          "QUERY",
          "DELETE"
        ],
        "correct_option": 2,
        "hint": "GraphQL operations allow you to retrieve data."
      },
      {
        "question": "What is the primary role of resolvers in a GraphQL API?",
        "options": [
          "To transform API responses into JSON format",
          "To execute the logic to fetch data for a query",
          "To manage user sessions and authentication",
          "To store data in a database"
        ],
        "correct_option": 1,
        "hint": "Resolvers are closely tied to how data is fetched based on client requests."
      },
      {
        "question": "Which tool is commonly used for integrating GraphQL on the client-side?",
        "options": [
          "Apollo Server",
          "Express.js",
          "Apollo Client",
          "Node.js"
        ],
        "correct_option": 2,
        "hint": "This tool is specifically designed for client-side operations in GraphQL."
      }
    ],
    "intermediate": [
      {
        "question": "What is the primary role of the schema in GraphQL?",
        "options": [
          "To validate the frontend UI components",
          "To define the types and structure of the data available",
          "To manage server-side caching",
          "To handle authentication and authorization"
        ],
        "correct_option": 1,
        "hint": "Schemas define the types and structure of data in GraphQL."
      },
      {
        "question": "Which GraphQL feature allows clients to subscribe to real-time updates from the server?",
        "options": [
          "Queries",
          "Mutations",
          "Resolvers",
          "Subscriptions"
        ],
        "correct_option": 3,
        "hint": "This feature is specifically designed for real-time data updates."
      },
      {
        "question": "In Apollo Client, which method is used to execute a mutation operation?",
        "options": [
          "useQuery",
          "useMutation",
          "useSubscription",
          "useFragment"
        ],
        "correct_option": 1,
        "hint": "This method is specifically designed for handling mutations."
      },
      {
        "question": "What is a common use case for using a resolver in GraphQL?",
        "options": [
          "To directly modify the database schema",
          "To update the client-side state",
          "To transform or fetch data for a specific field",
          "To manage user authentication"
        ],
        "correct_option": 2,
        "hint": "Resolvers are used to handle the actual data fetching logic."
      },
      {
        "question": "In Apollo Server, what is the purpose of a data source?",
        "options": [
          "To provide a way to connect and fetch data from REST APIs or databases",
          "To define the type system and schema",
          "To handle client-side caching",
          "To manage user authentication and authorization"
        ],
        "correct_option": 0,
        "hint": "Data sources are used to integrate with external data stores or APIs."
      }
    ],
    "advanced": [
      {
        "question": "What is a key advantage of using GraphQL's type system in schema design?",
        "options": [
          "It allows for dynamic typing similar to JavaScript.",
          "It enforces a strict schema that helps prevent invalid queries.",
          "It automatically generates client-side code.",
          "It eliminates the need for backend resolvers."
        ],
        "correct_option": 1,
        "hint": "Consider how GraphQL's type system impacts the validity of queries."
      },
      {
        "question": "In the context of Apollo Server, what is the primary role of a resolver?",
        "options": [
          "To define the structure of the GraphQL schema.",
          "To handle HTTP requests directly.",
          "To provide instructions for turning a GraphQL operation into data.",
          "To serve as a database connection manager."
        ],
        "correct_option": 2,
        "hint": "Resolvers are essential for executing GraphQL operations."
      },
      {
        "question": "What is a typical use case for GraphQL subscriptions in a full-stack application?",
        "options": [
          "To perform batch data fetching from the server.",
          "To execute write operations on the database.",
          "To receive real-time updates from the server.",
          "To cache static data on the client side."
        ],
        "correct_option": 2,
        "hint": "Subscriptions are designed for scenarios requiring real-time communication."
      },
      {
        "question": "Which of the following is NOT a valid GraphQL operation type?",
        "options": [
          "Query",
          "Mutation",
          "Subscription",
          "Transaction"
        ],
        "correct_option": 3,
        "hint": "Consider the basic operation types supported in GraphQL."
      },
      {
        "question": "How does Apollo Client enhance the usage of GraphQL on the frontend?",
        "options": [
          "By providing a REST API abstraction.",
          "By offering a state management library for local and remote data.",
          "By automatically generating GraphQL schemas.",
          "By replacing the need for GraphQL resolvers."
        ],
        "correct_option": 1,
        "hint": "Apollo Client is known for its state management capabilities."
      }
    ]
  }
}