{
  "id": "FS11",
  "name": "Backend Development with Node.js & Express.js",
  "category": "FullStack Development",
  "primary_tech": "Node.js",
  "topics": [
    "Building RESTful APIs",
    "Middleware & Error Handling",
    "Database Integration (MongoDB/PostgreSQL)",
    "CRUD Operations"
  ],
  "recommended": true,
  "tags": [
    "backend",
    "Node.js",
    "JavaScript",
    "API"
  ],
  "resources": {
    "beginner": {
      "docs": [
        "https://expressjs.com/",
        "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/Introduction",
        "https://expressjs.com/en/guide/routing.html"
      ],
      "notes": [
        "https://www.youtube.com/watch?v=f2EqECiTBL8&pp=ygUGI25wbTE3",
        "https://expressjs.com/",
        "https://www.youtube.com/watch?v=1oTuMPIwHmk",
        "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/Introduction",
        "https://www.youtube.com/watch?v=y18ubz7gOsQ&pp=ygURI2hhcmFtX2FpbmV4cHJlc3M%3D",
        "https://tamalweb.com/how-much-time-nodejs",
        "https://www.youtube.com/watch?v=Hej48pi_lOc&pp=ygUSI25ldF9idWZmZXJfbGVuZ3Ro"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=f2EqECiTBL8&pp=ygUGI25wbTE3",
        "https://www.youtube.com/watch?v=9BD9eK9VqXA",
        "https://www.youtube.com/watch?v=Hl7diL7SFw8",
        "https://www.youtube.com/watch?v=1oTuMPIwHmk",
        "https://www.youtube.com/watch?v=y18ubz7gOsQ&pp=ygURI2hhcmFtX2FpbmV4cHJlc3M%3D",
        "https://www.youtube.com/watch?v=Hej48pi_lOc&pp=ygUSI25ldF9idWZmZXJfbGVuZ3Ro",
        "https://www.youtube.com/watch?v=SccSCuHhOw0",
        "https://www.youtube.com/c/programmingwithmosh",
        "https://www.youtube.com/watch?v=olvF02oHS5U",
        "https://www.youtube.com/watch?v=fhRHGAgvrh4"
      ]
    },
    "intermediate": {
      "docs": [
        "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/Introduction",
        "https://expressjs.com/en/api.html",
        "https://bump.sh/blog/express-api-openapi"
      ],
      "notes": [
        "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/Introduction",
        "https://masteringbackend.com/posts/expressjs-5-tutorial-the-ultimate-guide/",
        "https://stackoverflow.com/questions/58833714/how-does-an-api-compare-to-directly-querying-your-database",
        "https://www.simplilearn.com/tutorials/nodejs-tutorial/what-is-nodejs",
        "https://www.mongodb.com/resources/languages/mern-stack",
        "https://www.freecodecamp.org/news/i-built-a-web-api-with-express-flask-aspnet/",
        "https://webandcrafts.com/blog/node-js-backend"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=nQdyiK7-VlQ&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=qwfE7fSVaZM",
        "https://www.youtube.com/watch?v=SLpUKAGnm-g",
        "https://www.youtube.com/watch?v=bsaGKP8Eon4",
        "https://www.youtube.com/watch?v=Zh7psmf1KAA",
        "https://www.youtube.com/watch?v=mtuYmm2ITvI",
        "https://www.youtube.com/watch?v=oNlMrpnUSFE",
        "https://www.youtube.com/watch?v=KqQoiFBp36A"
      ]
    },
    "advanced": {
      "docs": [
        "https://expressjs.com/",
        "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/Introduction",
        "http://www.w3schools.com/nodejs/",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript"
      ],
      "notes": [
        "https://masteringbackend.com/posts/expressjs-5-tutorial-the-ultimate-guide/",
        "https://expressjs.com/",
        "http://nodesource.com/blog/how-nodejs-works/",
        "https://daily.dev/blog/setup-nodejs-express-project-a-beginners-guide",
        "https://www.linkedin.com/posts/akshaymarch7_javascript-react-angular-activity-7275744254327508992-d7fJ",
        "https://www.netguru.com/blog/node-js-books"
      ],
      "videos": [
        "https://www.youtube.com/watch?v=f2EqECiTBL8",
        "https://www.youtube.com/watch?v=b8ZUb_Okxro&pp=ygUMI3Jlc3RhcGljb2Rl",
        "https://www.youtube.com/watch?v=H9M02of22z4",
        "https://www.youtube.com/watch?v=MIJt9H69QVc",
        "https://m.youtube.com/watch?v=4nKWREmCvsE",
        "https://www.youtube.com/watch?v=fUJ3ULyyA-Y",
        "https://www.youtube.com/watch?v=hu38B0WQSYQ",
        "https://www.youtube.com/c/GreatAdib",
        "https://www.youtube.com/c/webdevsimplified"
      ]
    }
  },
  "quiz": {
    "beginner": [
      {
        "question": "What is a key feature of a RESTful API?",
        "options": [
          "Stateful communication",
          "Stateless communication",
          "Synchronous communication",
          "Asynchronous communication"
        ],
        "correct_option": 1,
        "hint": "RESTful APIs are designed to not store session state on the server."
      },
      {
        "question": "Which method is used in Express.js to handle HTTP GET requests?",
        "options": [
          "app.get()",
          "app.post()",
          "app.put()",
          "app.delete()"
        ],
        "correct_option": 0,
        "hint": "This method is used for retrieving data from a server."
      },
      {
        "question": "In Node.js, which module is commonly used to interact with MongoDB?",
        "options": [
          "pg",
          "mysql",
          "mongodb",
          "sqlite3"
        ],
        "correct_option": 2,
        "hint": "This module's name is the same as the database itself."
      },
      {
        "question": "What does CRUD stand for in database operations?",
        "options": [
          "Create, Read, Update, Delete",
          "Copy, Read, Update, Delete",
          "Create, Rename, Update, Delete",
          "Create, Read, Undo, Delete"
        ],
        "correct_option": 0,
        "hint": "These operations correspond to basic functions of persistent storage."
      },
      {
        "question": "What is middleware in Express.js?",
        "options": [
          "A function that handles requests",
          "A database query language",
          "A frontend development tool",
          "A type of database"
        ],
        "correct_option": 0,
        "hint": "This function can modify request and response objects, end request-response cycles, and call the next middleware function in the stack."
      }
    ],
    "intermediate": [
      {
        "question": "What is the primary purpose of middleware in an Express.js application?",
        "options": [
          "To handle database operations",
          "To manage static files",
          "To process requests before reaching the final route handler",
          "To render HTML templates"
        ],
        "correct_option": 2,
        "hint": "Middleware functions provide a way to modify request and response objects."
      },
      {
        "question": "Which HTTP method is typically used to update an existing resource in a RESTful API?",
        "options": [
          "GET",
          "POST",
          "PUT",
          "DELETE"
        ],
        "correct_option": 2,
        "hint": "This method is often used along with IDs to update resources."
      },
      {
        "question": "In a Node.js application using MongoDB, which module is commonly used to manage database interactions?",
        "options": [
          "sequelize",
          "mongoose",
          "express",
          "pg"
        ],
        "correct_option": 1,
        "hint": "This module provides a straightforward schema-based solution for application data modeling."
      },
      {
        "question": "How does Express.js handle errors that occur in synchronous code within route handlers?",
        "options": [
          "Automatically logs the error to the console",
          "Sends a default error message to the client",
          "Requires a next() function with an error parameter in middleware",
          "Ignores errors unless explicitly caught"
        ],
        "correct_option": 2,
        "hint": "Express error-handling middleware takes four arguments."
      },
      {
        "question": "What does CRUD stand for in the context of database operations?",
        "options": [
          "Create, Read, Update, Delete",
          "Connect, Render, Update, Deploy",
          "Compile, Run, Update, Debug",
          "Create, Retrieve, Update, Deploy"
        ],
        "correct_option": 0,
        "hint": "These operations are the basic functions of persistent storage."
      }
    ],
    "advanced": [
      {
        "question": "In Node.js, what is the role of middleware in an Express.js application?",
        "options": [
          "To handle HTTP requests and perform custom processing",
          "To directly execute database queries",
          "To render HTML templates",
          "To compile JavaScript code"
        ],
        "correct_option": 0,
        "hint": "Middleware functions are used to handle different stages of request processing."
      },
      {
        "question": "Which HTTP methods are primarily associated with CRUD operations in a RESTful API?",
        "options": [
          "CONNECT, TRACE, PATCH, OPTIONS",
          "GET, POST, PUT, DELETE",
          "HEAD, GET, POST, DELETE",
          "PUT, DELETE, LINK, UNLINK"
        ],
        "correct_option": 1,
        "hint": "Consider the operations: Read, Create, Update, Delete."
      },
      {
        "question": "What feature of Express.js allows for handling errors in a centralized manner?",
        "options": [
          "Route-level middleware",
          "Error-handling middleware",
          "Express Router",
          "Asynchronous functions"
        ],
        "correct_option": 1,
        "hint": "This type of middleware takes four arguments: err, req, res, and next."
      },
      {
        "question": "When integrating MongoDB with a Node.js application, which of the following drivers or libraries is commonly used?",
        "options": [
          "pg",
          "mongoose",
          "sequelize",
          "knex"
        ],
        "correct_option": 1,
        "hint": "This library simplifies MongoDB operations and provides schema validation."
      },
      {
        "question": "In a PostgreSQL database integration with Node.js, which package provides a promise-based query interface?",
        "options": [
          "pg-promise",
          "mongo-promise",
          "express-promise",
          "node-promise"
        ],
        "correct_option": 0,
        "hint": "This package extends the 'pg' module with promise support."
      }
    ]
  }
}