{
  "id": "BE4",
  "name": "Message Queues & Event-Driven Systems",
  "category": "Backend Development",
  "primary_tech": "Message Queues",
  "topics": [
    "Publish/Subscribe Patterns",
    "RabbitMQ/Kafka Basics",
    "Idempotency & Dead Letter Queues"
  ],
  "recommended": false,
  "tags": [
    "messaging",
    "architecture",
    "distributed-systems"
  ],
  "resources": {
    "beginner": {
      "docs": [
        {
          "url": "https://www.ateam-oracle.com/post/event-driven-integrations-primer",
          "description": "An introductory guide to event-driven integrations using Oracle technologies."
        },
        {
          "url": "https://docs.oracle.com/en/database/oracle/oracle-database/23/adque/aq-introduction.html",
          "description": "An introduction to Oracle Advanced Queuing for database message management."
        },
        {
          "url": "https://cloud.google.com/pubsub/docs/overview",
          "description": "An overview of Google Cloud Pub/Sub, a messaging service for event-driven systems."
        },
        {
          "url": "https://docs.aws.amazon.com/lambda/latest/dg/concepts-event-driven-architectures.html",
          "description": "An overview of event-driven architectures in AWS Lambda."
        }
      ],
      "notes": [
        {
          "url": "https://quix.io/blog/what-why-how-of-event-driven-programming",
          "description": "An introduction to the concepts, benefits, and implementation of event-driven programming."
        },
        {
          "url": "https://docs.oracle.com/en/database/oracle/oracle-database/23/adque/aq-introduction.html",
          "description": "An introduction to Oracle Advanced Queuing in Oracle Database 23c."
        },
        {
          "url": "http://www.kurrent.io/event-driven-architecture",
          "description": "An overview of event-driven architecture principles and implementation strategies."
        },
        {
          "url": "https://www.ateam-oracle.com/post/event-driven-integrations-primer",
          "description": "An introductory guide to event-driven integrations using Oracle technologies."
        },
        {
          "url": "https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/event-driven",
          "description": "An overview of event-driven architecture styles and their implementation in Azure."
        },
        {
          "url": "https://keda.sh/",
          "description": "KEDA is an open-source project that provides event-driven autoscaling for Kubernetes applications."
        }
      ],
      "videos": [
        "https://www.youtube.com/watch?v=RojKJnF_WWQ",
        "https://www.youtube.com/watch?v=1yC_bw0tWhQ",
        "https://www.youtube.com/watch?v=rSIirRFa77s&pp=ygUJI3N1YmV2ZW50",
        "https://www.youtube.com/watch?v=gA2-eqDVSng",
        "https://www.youtube.com/watch?v=dpl4xKkPxHY",
        "https://www.youtube.com/watch?v=bfVddTJNiAw&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=QkdkLdMBuL0&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=WRGgmoA4PgA",
        "https://www.youtube.com/watch?v=nFxjaVmFj5E"
      ]
    },
    "intermediate": {
      "docs": [
        {
          "url": "https://www.ateam-oracle.com/post/event-driven-integrations-primer",
          "description": "An introductory guide to event-driven integrations with Oracle technologies."
        },
        {
          "url": "https://cloud.google.com/pubsub/docs/overview",
          "description": "An overview of Google Cloud Pub/Sub, a messaging service for real-time event streaming."
        },
        {
          "url": "https://architect.salesforce.com/decision-guides/event-driven",
          "description": "A decision guide for implementing event-driven architecture in Salesforce applications."
        }
      ],
      "notes": [
        {
          "url": "https://quix.io/blog/what-why-how-of-event-driven-programming",
          "description": "An insightful overview of event-driven programming, explaining its principles, benefits, and implementation."
        },
        {
          "url": "https://stackoverflow.com/questions/1659351/message-driven-vs-event-driven-approaches-to-application-integration",
          "description": "A discussion on the differences between message-driven and event-driven approaches to application integration."
        },
        {
          "url": "https://www.ateam-oracle.com/post/event-driven-integrations-primer",
          "description": "An introductory guide to event-driven integrations in Oracle systems."
        },
        {
          "url": "https://www.tinybird.co/blog-posts/event-driven-architecture-best-practices-for-databases-and-files",
          "description": "Best practices for implementing event-driven architecture in databases and files."
        },
        {
          "url": "https://docs.aws.amazon.com/lambda/latest/dg/concepts-event-driven-architectures.html",
          "description": "An overview of event-driven architectures using AWS Lambda."
        }
      ],
      "videos": [
        "https://www.youtube.com/watch?v=RojKJnF_WWQ",
        "https://www.youtube.com/watch?v=xErwDaOc-Gs&pp=0gcJCdgAo7VqN5tD",
        "https://www.youtube.com/watch?v=-JCup-nOG2g",
        "https://www.youtube.com/watch?v=rSIirRFa77s&pp=ygUJI3N1YmV2ZW50",
        "https://www.youtube.com/watch?v=S3IAVii92xw",
        "https://www.youtube.com/watch?v=rJHTK2TfZ1I",
        "https://www.youtube.com/watch?v=IWkg7EwcUds",
        "https://www.youtube.com/watch?v=QkdkLdMBuL0&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=Fb_0UOD2X2I&pp=0gcJCf0Ao7VqN5tD"
      ]
    },
    "advanced": {
      "docs": [
        {
          "url": "https://www.astronomer.io/docs/learn/airflow-event-driven-scheduling",
          "description": "A guide on implementing event-driven scheduling in Apache Airflow."
        },
        {
          "url": "https://docs.aws.amazon.com/lambda/latest/dg/welcome.html",
          "description": "An introduction and guide to using AWS Lambda for serverless computing."
        },
        {
          "url": "https://docs.nvidia.com/nsight-systems/UserGuide/index.html",
          "description": "A detailed user guide for NVIDIA Nsight Systems profiling tool."
        }
      ],
      "notes": [
        {
          "url": "https://solace.com/event-driven-architecture-patterns/",
          "description": "An overview of event-driven architecture patterns and their applications."
        },
        {
          "url": "https://www.architecture-weekly.com/p/whole-architecture-weekly-content",
          "description": "A weekly newsletter covering diverse topics in software architecture."
        },
        {
          "url": "https://learning.sap.com/learning-journeys/discovering-event-driven-integration-with-sap-integration-suite-advanced-event-mesh/understanding-sap-integration-suite-advanced-event-mesh-in-the-event-driven-architecture_c11f81e8-f173-4384-8df2-cca83e5541ce",
          "description": "An overview of SAP Integration Suite's Advanced Event Mesh in event-driven architecture."
        },
        {
          "url": "https://newsletter.pragmaticengineer.com/p/designing-a-payment-system",
          "description": "An insightful overview of designing robust and scalable payment systems."
        },
        {
          "url": "https://github.com/AutoMQ/automq/wiki/Differences-Between-Event-Streaming-and-Message-Queuing",
          "description": "An informative comparison between event streaming and message queuing technologies."
        },
        {
          "url": "https://dzone.com/articles/oracle-advanced-queue-a-guide",
          "description": "An introductory guide to using Oracle Advanced Queue for message queuing."
        }
      ],
      "videos": [
        "https://www.youtube.com/watch?v=X40EozwK75s",
        "https://www.youtube.com/watch?v=nFxjaVmFj5E",
        "https://www.youtube.com/watch?v=QkdkLdMBuL0&pp=0gcJCfwAo7VqN5tD",
        "https://www.youtube.com/watch?v=SqVfCyfCJqw&pp=ygUJIzHRgWthZmth",
        "https://www.youtube.com/watch?v=hNDjd9I_VGA",
        "https://www.youtube.com/watch?v=tPYa1r_cZ2E&pp=ygUFI3lzcXM%3D",
        "https://www.youtube.com/watch?v=VXsAgYoC1Jc&pp=ygUHI3Nuc2FoaQ%3D%3D",
        "https://www.youtube.com/watch?v=UEg40Te8pnE",
        "https://www.youtube.com/watch?v=jQo-KeJB1ws",
        "https://www.youtube.com/t/partnerships_faq"
      ]
    }
  },
  "quiz": {
    "beginner": [
      {
        "question": "What is the main purpose of a message queue in an event-driven system?",
        "options": [
          "To store large files permanently",
          "To facilitate asynchronous communication between services",
          "To process data quickly in real-time",
          "To replace databases in storing records"
        ],
        "correct_option": 1,
        "hint": "Message queues are used to decouple and coordinate the integration of applications."
      },
      {
        "question": "Which of the following best describes the publish/subscribe pattern?",
        "options": [
          "A system where one service sends messages to exactly one receiving service",
          "A system where multiple services can receive messages from a single sending service",
          "A system where messages are permanently stored for future retrieval",
          "A system where messages are encrypted before sending"
        ],
        "correct_option": 1,
        "hint": "Think about how multiple subscribers can listen to the same topic."
      },
      {
        "question": "What is RabbitMQ primarily used for in message queuing?",
        "options": [
          "Storing data permanently",
          "Performing complex data transformations",
          "Facilitating communication between distributed systems",
          "Managing user authentication"
        ],
        "correct_option": 2,
        "hint": "RabbitMQ is a message broker software that enables applications to communicate with each other."
      },
      {
        "question": "What is a dead letter queue?",
        "options": [
          "A queue that stores messages that were not delivered successfully",
          "A queue that archives old messages for future reference",
          "A queue that processes messages in real-time",
          "A queue that deletes messages after a certain period"
        ],
        "correct_option": 0,
        "hint": "It holds messages that cannot be processed successfully."
      },
      {
        "question": "Why is idempotency important in message processing?",
        "options": [
          "To ensure that messages are delivered quickly",
          "To prevent the same message from being processed multiple times",
          "To encrypt messages for security",
          "To enhance the speed of message queues"
        ],
        "correct_option": 1,
        "hint": "Idempotency ensures that even if a message is delivered multiple times, it will have the same effect as if it was delivered once."
      }
    ],
    "intermediate": [
      {
        "question": "What is the primary benefit of using a Publish/Subscribe pattern in message queues?",
        "options": [
          "Improves message delivery speed",
          "Enhances message security",
          "Decouples message producers from consumers",
          "Reduces the need for message acknowledgments"
        ],
        "correct_option": 2,
        "hint": "Think about how the pattern affects the relationship between message producers and consumers."
      },
      {
        "question": "Which component in RabbitMQ is responsible for holding messages before they are delivered to consumers?",
        "options": [
          "Exchange",
          "Queue",
          "Binding",
          "Producer"
        ],
        "correct_option": 1,
        "hint": "This component acts as a buffer for messages."
      },
      {
        "question": "In Kafka, what is the purpose of a Dead Letter Queue (DLQ)?",
        "options": [
          "To store messages that were not successfully processed",
          "To temporarily hold messages for scheduled delivery",
          "To encrypt sensitive messages in transit",
          "To increase message throughput"
        ],
        "correct_option": 0,
        "hint": "Consider what happens to messages that cannot be processed."
      },
      {
        "question": "How does Kafka ensure idempotency when processing messages?",
        "options": [
          "By using unique message keys for deduplication",
          "By maintaining a log of processed messages",
          "By allowing exactly-once semantics for consumers",
          "By ensuring message order is always preserved"
        ],
        "correct_option": 2,
        "hint": "Kafka has a specific feature that guarantees message processing only once."
      },
      {
        "question": "What role does an Exchange play in RabbitMQ's message routing?",
        "options": [
          "Directs messages to specific queues based on routing keys",
          "Stores messages temporarily before delivery",
          "Ensures high availability of messages",
          "Encrypts messages for secure transmission"
        ],
        "correct_option": 0,
        "hint": "This component uses routing keys to determine where messages should go."
      }
    ],
    "advanced": [
      {
        "question": "What is the primary purpose of using a Publish/Subscribe pattern in message queuing systems?",
        "options": [
          "To improve system scaling by decoupling message producers and consumers",
          "To ensure messages are delivered in a strict sequence",
          "To allow synchronous communication between services",
          "To reduce the overhead of message serialization"
        ],
        "correct_option": 0,
        "hint": "Think about how Publish/Subscribe patterns affect the relationship between producers and consumers."
      },
      {
        "question": "In RabbitMQ, what is the role of an exchange?",
        "options": [
          "To route messages to one or more queues based on rules",
          "To store messages temporarily before they are processed",
          "To guarantee message delivery in case of consumer failure",
          "To encrypt messages during transmission"
        ],
        "correct_option": 0,
        "hint": "Consider what component determines how messages reach the appropriate queue."
      },
      {
        "question": "How does Kafka ensure message idempotency when processing events?",
        "options": [
          "By using unique message keys and allowing consumers to track offsets",
          "By enabling automatic retries without duplicates",
          "By storing messages in a non-volatile memory",
          "By compressing messages to avoid duplicates"
        ],
        "correct_option": 0,
        "hint": "Idempotency requires handling repeat processing without side effects."
      },
      {
        "question": "What is a Dead Letter Queue (DLQ) used for in message queuing systems?",
        "options": [
          "To store messages that cannot be processed successfully",
          "To increase message throughput by bypassing normal queues",
          "To temporarily hold messages during peak loads",
          "To encrypt messages for secure transmission"
        ],
        "correct_option": 0,
        "hint": "DLQs are related to error recovery and handling unprocessable messages."
      },
      {
        "question": "Which of the following is a key difference between RabbitMQ and Kafka?",
        "options": [
          "RabbitMQ uses a broker-based architecture while Kafka does not",
          "Kafka is optimized for high throughput and log-based storage",
          "RabbitMQ provides stronger message ordering guarantees compared to Kafka",
          "Kafka does not support Publish/Subscribe patterns"
        ],
        "correct_option": 1,
        "hint": "Consider the primary architectural strengths of Kafka in terms of performance."
      }
    ]
  }
}